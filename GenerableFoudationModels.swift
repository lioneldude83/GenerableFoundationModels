//
//  GenerableFoudationModels.swift
//  An example on how to use Generable macro for Guided Generation in Foundation Models.
//
//  Created by Lionel Ng on 17/7/25.
//

import Foundation
import FoundationModels
import SwiftUI

/// A Generable structure that lets the model generate `Superhero` instances.
@Generable(description: "Basic information of a superhero")
struct Superhero {
    let name: String
    
    @Guide(description: "Age of the person", .range(0...99))
    let age: Int
    
    @Guide(description: "A list of hobbies the superhero has", .count(2...6))
    let interests: [String]
    
    @Guide(description: "A list of powers the superhero has", .count(1))
    let powers: [String]
}

/// An Observable `SuperheroGenerator` class that generates superheros for the on-device language model.
@MainActor
@Observable
class SuperheroGenerator {
    /// Holds a partially generated Superhero instance to support streaming responses.
    var superhero: Superhero.PartiallyGenerated?
    let session: LanguageModelSession
    
    /// Initialize the `LanguageModelSession` with the given instructions.
    init(instructions: String) {
        self.session = LanguageModelSession(instructions: instructions)
    }
    
    func generateHero(_ question: String) async throws {
        let stream = session.streamResponse(to: question, generating: Superhero.self)
        
        for try await partialResponse in stream {
            self.superhero = partialResponse
        }
    }
}

/// The view for generating a Hero which is of Generable type defined in Superhero.
struct HeroView: View {
    /// The instructions used to initialize the session, which takes precedence over the prompt.
    private let instructions = "You are a creator of a popular TV series. Your role is to improve the ratings of the production house you work for by creating a new superhero for your series."
    /// The question (which is the prompt) input by the user.
    @State private var question = "Generate a superhero who lives to code and fights crime!"
    /// The object to be generated by the session.
    @State private var generator: SuperheroGenerator?
    /// Generation Task that allows the stream response to be stopped when the stop button is tapped.
    @State private var generationTask: Task<Void, Never>?
    
    var body: some View {
        VStack {
            Form {
                Section("Foundation Models") {
                    TextField("Question", text: $question)
                    
                    HStack(spacing: 24) {
                        if generator?.session.isResponding ?? false {
                            Button(action: {
                                generationTask?.cancel()
                                generationTask = nil
                            }) {
                                Image(systemName: "stop.circle.fill")
                                    .resizable()
                                    .frame(width: 24, height: 24)
                            }
                            .buttonStyle(.glassProminent)
                        } else {
                            Button(action: {
                                generationTask = Task {
                                    generator = SuperheroGenerator(instructions: instructions)
                                    try? await generator?.generateHero(question)
                                }
                            }) {
                                Text("Ask Question")
                            }
                            .buttonStyle(.glassProminent)
                        }
                        
                        if generator?.session.isResponding ?? false {
                            ProgressView().scaleEffect(1.25)
                        }
                        Spacer()
                    }
                }
                
                if let hero = generator?.superhero {
                    Section("Superhero") {
                        VStack(alignment: .leading) {
                            Text(hero.name ?? "nil")
                            Text(hero.age ?? 0, format: .number)
                            
                            HStack(spacing: 36) {
                                VStack(alignment: .leading) {
                                    Text("Interests:")
                                        .font(.subheadline)
                                    if let interests = hero.interests, !interests.isEmpty {
                                        ForEach(Array(interests.enumerated()), id: \.offset) { index, interest in
                                            Text(interest)
                                        }
                                    }
                                }
                                
                                VStack(alignment: .leading) {
                                    Text("Powers:")
                                        .font(.subheadline)
                                    if let powers = hero.powers, !powers.isEmpty {
                                        ForEach(Array(powers.enumerated()), id: \.offset) { index, power in
                                            Text(power)
                                        }
                                    }
                                }
                            }
                        }
                        .padding(.vertical, 12)
                    }
                }
            }
        }
    }
}

#Preview {
    HeroView()
}
